---
version: '3.4'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      EXTRA_ARGS: -javaagent:/usr/share/jmx-exporter/jmx_prometheus_javaagent-0.16.1.jar=1234:/usr/share/jmx-exporter/zookeeper.yml
    volumes:
      - ./shared-assets/jmx-exporter/:/usr/share/jmx-exporter

  broker:
    image: confluentinc/cp-server:6.2.0
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      EXTRA_ARGS: -javaagent:/usr/share/jmx-exporter/jmx_prometheus_javaagent-0.16.1.jar=1234:/usr/share/jmx-exporter/kafka_broker.yml
    volumes:
      - ./shared-assets/jmx-exporter/:/usr/share/jmx-exporter

  schema-registry:
    image: confluentinc/cp-schema-registry:6.2.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      EXTRA_ARGS: -javaagent:/usr/share/jmx-exporter/jmx_prometheus_javaagent-0.16.1.jar=1234:/usr/share/jmx-exporter/confluent_schemaregistry.yml
    volumes:
      - ./shared-assets/jmx-exporter/:/usr/share/jmx-exporter

  connect:
    image: cnfldemos/cp-server-connect-datagen:0.5.0-6.2.0
    hostname: connect
    container_name: connect
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    volumes:
      - ./shared-assets/jmx-exporter/:/usr/share/jmx-exporter
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-6.2.0.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
      EXTRA_ARGS: -javaagent:/usr/share/jmx-exporter/jmx_prometheus_javaagent-0.16.1.jar=1234:/usr/share/jmx-exporter/kafka_connect.yml

  control-center:
    image: confluentinc/cp-enterprise-control-center:6.2.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
      - connect
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  prometheus:
    image: prom/prometheus:v2.29.2
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./monitoring/assets/prometheus/prometheus-config/:/etc/prometheus

  node-exporter:
    image: prom/node-exporter:v1.2.2
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points"
      - "^(aufs|proc|nsfs|shm|cgroup|tmpfs|binfmt_misc|debugfs|devpts|fusectl|hugetlbfs|fuse.lxcfs|mqueue|pstore|securityfs|sysfs|autofs|devtmpfs|configfs)"

  kafka-lag-exporter:
    image: lightbend/kafka-lag-exporter:0.6.7
    container_name: kafka-lag-exporter
    hostname: kafka-lag-exporter
    restart: always
    volumes:
      - ./shared-assets/kafka-lag-exporter:/opt/docker/conf
      - ./monitoring/assets/prometheus/security:/etc/kafka/secrets

  grafana:
    image: grafana/grafana:8.1.3
    container_name: grafana
    environment:
      - "GF_SECURITY_ADMIN_USER=admin"
      - "GF_SECURITY_ADMIN_PASSWORD=password"
      - "GF_USERS_ALLOW_SIGN_UP=false"
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/assets/grafana/provisioning/:/etc/grafana/provisioning
  jaeger:
    image: jaegertracing/all-in-one:1.35
    container_name: jaeger
    restart: on-failure
    ports:
      - 6831:6831/udp
      - 6832:6832/udp 
      - 5778:5778 
      - 16686:16686 
      - 4317:4317 
      - 4318:4318 
      - 14250:14250 
      - 14268:14268 
      - 14269:14269
      - 9411:9411
  otel-collector:
    image: otel/opentelemetry-collector:0.53.0
    container_name: otel
    command: ["--config=/usr/share/otel-collector/otel-collector-config.yaml", ""]
    volumes:
      - ./shared-assets/opentelemetry//otel-collector-config.yaml:/usr/share/otel-collector/otel-collector-config.yaml
    ports:
      - "1888:1888"  
      - "8888:8888"
      - "8889:8889"
      - "13133:13133"
      - "14317:4317"
      - "55679:55679"
    depends_on:
      - jaeger
  # spring-app:
  #   container_name: spring-app
  #   build:
  #     context: ../spring/spring-kafka
  #     dockerfile: Dockerfile
  #   image: spring-app:latest
  #   ports:
  #     - "28080:28080"
  #   volumes:
  #     - ./shared-assets/jmx-exporter/:/usr/share/jmx-exporter
  # scs-app:
  #   container_name: scs-app
  #   build:
  #     context: ../spring/scs
  #     dockerfile: Dockerfile
  #   image: scs-app:latest
  #   ports:
  #     - "18080:18080"
  #   volumes:
  #     - ./shared-assets/jmx-exporter/:/usr/share/jmx-exporter
  java-producer:
    container_name: java-producer
    build:
      context: ../java/java-producer
      dockerfile: Dockerfile
    image: java-producer:latest
    ports:
      - "38080:38080"
    volumes:
      - ./shared-assets/jmx-exporter/:/usr/share/jmx-exporter
      - ./shared-assets/opentelemetry/:/usr/share/opentelemetry
    depends_on:
      - broker
      - schema-registry
  java-consumer:
    container_name: java-consumer
    build:
      context: ../java/java-consumer
      dockerfile: Dockerfile
    image: java-consumer:latest
    volumes:
      - ./shared-assets/jmx-exporter/:/usr/share/jmx-exporter
      - ./shared-assets/opentelemetry/:/usr/share/opentelemetry
    depends_on:
      - broker
      - schema-registry
